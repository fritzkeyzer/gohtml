// Code generated by gohtml. DO NOT EDIT

//go:build !ignore_autogenerated

package tests

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

// --- START TEMPLATE: Loops

var rawLoopsTemplate =
// language=gotemplate
`{{range .Widgets}}
    {{.Name}} - {{.Price}}
{{end}}

{{range $link := .Socials}}
    {{$link.Name}} {{$link.Href}}
{{end}}`

var LoopsTemplate = template.Must(template.New("Loops").Parse(rawLoopsTemplate))

type LoopsData struct {
	Widgets []LoopsWidget
	Socials []LoopsSocialsLink
}

type LoopsSocialsLink struct {
	Name any
	Href any
}

type LoopsWidget struct {
	Name  any
	Price any
}

// Loops renders the "Loops" template as an HTML fragment
func Loops(data LoopsData) template.HTML {
	buf := new(bytes.Buffer)
	err := RenderLoops(buf, data)
	if err != nil {
		panic(err)
	}

	return template.HTML(buf.String())
}

// RenderLoops renders the "Loops" template to the specified writer.
// If the writer is of the type http.ResponseWriter - the content-type header is set to "text/html; charset=utf-8"
func RenderLoops(w io.Writer, data LoopsData) error {
	if hw, ok := w.(http.ResponseWriter); ok {
		hw.Header().Set("Content-Type", "text/html; charset=utf-8")
	}

	tmpl := LoopsTemplate
	if LiveReload {
		var err error
		tmpl, err = template.ParseFiles("tests/loops.gohtml")
		if err != nil {
			return err
		}
	}

	return tmpl.Execute(w, data)
}

// --- END TEMPLATE: Loops
