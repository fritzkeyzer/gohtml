// Code generated by gohtml. DO NOT EDIT

//go:build !ignore_autogenerated

package tests

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

// <<< START TEMPLATE: Conditional

var rawConditionalTemplate =
// language=gotemplate
`<button>
    {{if .SignedIn}}
        Hello {{.Username}}
    {{end}}
</button>
`

var ConditionalTemplate = template.Must(template.New("Conditional").Parse(rawConditionalTemplate))

type ConditionalData struct {
	SignedIn any
	Username any
}

// Conditional renders the conditional.gohtml template as an HTML fragment
func Conditional(data ConditionalData) template.HTML {
	buf := new(bytes.Buffer)
	err := RenderConditional(buf, data)
	if err != nil {
		panic(err)
	}

	return template.HTML(buf.String())
}

// RenderConditional renders the conditional.gohtml template to the specified writer.
// For writing to an http.ResponseWriter - use RenderConditionalHTTP instead.
func RenderConditional(w io.Writer, data ConditionalData) error {
	tmpl := ConditionalTemplate
	if LiveReload {
		var err error
		tmpl, err = template.ParseFiles("tests/conditional.gohtml")
		if err != nil {
			return err
		}
	}

	return tmpl.Execute(w, data)
}

// RenderConditionalHTTP renders the conditional.gohtml template to the http.ResponseWriter.
// Errors are handled with the package global tests.ErrorFn function (which can be customized) and returned.
// You can choose to handle errors with the tests.ErrorFn handler, the returned error, or both.
func RenderConditionalHTTP(w http.ResponseWriter, data ConditionalData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	buf := new(bytes.Buffer)
	err := RenderConditional(buf, data)
	if err != nil {
		ErrorFn(w, err)
		return err
	}

	_, _ = w.Write(buf.Bytes())

	return nil
}

// >>> END TEMPLATE: Conditional
