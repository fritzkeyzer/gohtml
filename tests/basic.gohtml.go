// Code generated by gohtml. DO NOT EDIT

//go:build !ignore_autogenerated

package tests

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

// <<< START TEMPLATE: Basic

var rawBasicTemplate =
// language=gotemplate
`<h1>Hello {{.Name}}</h1>
<footer>Today's date is {{.Date}}</footer>
`

var BasicTemplate = template.Must(template.New("Basic").Parse(rawBasicTemplate))

type BasicData struct {
	Name any
	Date any
}

// Basic renders the basic.gohtml template as an HTML fragment
func Basic(data BasicData) template.HTML {
	buf := new(bytes.Buffer)
	err := RenderBasic(buf, data)
	if err != nil {
		panic(err)
	}

	return template.HTML(buf.String())
}

// RenderBasic renders the basic.gohtml template to the specified writer.
// For writing to an http.ResponseWriter - use RenderBasicHTTP instead.
func RenderBasic(w io.Writer, data BasicData) error {
	tmpl := BasicTemplate
	if LiveReload {
		var err error
		tmpl, err = template.ParseFiles("tests/basic.gohtml")
		if err != nil {
			return err
		}
	}

	return tmpl.Execute(w, data)
}

// RenderBasicHTTP renders the basic.gohtml template to the http.ResponseWriter.
// Errors are handled with the package global tests.ErrorFn function (which can be customized) and returned.
// You can choose to handle errors with the tests.ErrorFn handler, the returned error, or both.
func RenderBasicHTTP(w http.ResponseWriter, data BasicData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	buf := new(bytes.Buffer)
	err := RenderBasic(buf, data)
	if err != nil {
		ErrorFn(w, err)
		return err
	}

	_, _ = w.Write(buf.Bytes())
	w.WriteHeader(http.StatusOK)

	return nil
}

// >>> END TEMPLATE: Basic
