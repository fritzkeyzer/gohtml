// Code generated by gohtml. DO NOT EDIT

package tests

import (
	"bytes"
	"embed"
	"html/template"
	"io"
	"os"
)

import "net/http"

var LiveReload = os.Getenv("GOHTML_LIVERELOAD") != ""

//go:embed *.gohtml
var tmplFiles embed.FS
var templates = template.Must(template.ParseFS(tmplFiles, "*.gohtml"))

func tmpl() *template.Template {
	if LiveReload {
		return template.Must(template.ParseFS(os.DirFS("."), "*.gohtml"))
	}
	return templates
}

func mustHTML[T any](fn func(w io.Writer, data T) error, data T) template.HTML {
	w := new(bytes.Buffer)
	err := fn(w, data)
	if err != nil {
		panic(err)
	}
	return template.HTML(w.String())
}

func mustHTMLNoArgs(fn func(w io.Writer) error) template.HTML {
	w := new(bytes.Buffer)
	err := fn(w)
	if err != nil {
		panic(err)
	}
	return template.HTML(w.String())
}

// BEGIN: BaseLayout - - - - - - - -

type BaseLayoutData struct {
	Title      any
	Imports    *ImportsData
	BodyScript any
	Nav        *NavbarData
	Content    any
}

// BaseLayout renders the "BaseLayout" template as an HTML fragment
func BaseLayout(data BaseLayoutData) template.HTML {
	return mustHTML(RenderBaseLayout, data)
}

// RenderBaseLayout renders the "BaseLayout" template to a writer
func RenderBaseLayout(w io.Writer, data BaseLayoutData) error {
	return tmpl().ExecuteTemplate(w, "BaseLayout", data)
}

// RenderBaseLayoutHTTP renders "BaseLayout" to an http.ResponseWriter
func RenderBaseLayoutHTTP(w http.ResponseWriter, data BaseLayoutData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "BaseLayout", data)
}

// BEGIN: ConditionalLoop - - - - - - - -

type ConditionalLoopData struct {
	ErrorMsg any
	Meta     []ConditionalLoopMetaItem
}

type ConditionalLoopMetaItem struct {
	Key   any
	Value any
}

// ConditionalLoop renders the "ConditionalLoop" template as an HTML fragment
func ConditionalLoop(data ConditionalLoopData) template.HTML {
	return mustHTML(RenderConditionalLoop, data)
}

// RenderConditionalLoop renders the "ConditionalLoop" template to a writer
func RenderConditionalLoop(w io.Writer, data ConditionalLoopData) error {
	return tmpl().ExecuteTemplate(w, "ConditionalLoop", data)
}

// RenderConditionalLoopHTTP renders "ConditionalLoop" to an http.ResponseWriter
func RenderConditionalLoopHTTP(w http.ResponseWriter, data ConditionalLoopData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "ConditionalLoop", data)
}

// BEGIN: Imports - - - - - - - -

type ImportsData struct {
	Imports []ImportsImport
}

type ImportsImport struct {
	Src   any
	Defer any
}

// Imports renders the "Imports" template as an HTML fragment
func Imports(data ImportsData) template.HTML {
	return mustHTML(RenderImports, data)
}

// RenderImports renders the "Imports" template to a writer
func RenderImports(w io.Writer, data ImportsData) error {
	return tmpl().ExecuteTemplate(w, "Imports", data)
}

// RenderImportsHTTP renders "Imports" to an http.ResponseWriter
func RenderImportsHTTP(w http.ResponseWriter, data ImportsData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "Imports", data)
}

// BEGIN: Loop - - - - - - - -

type LoopData struct {
	Items []LoopItem
}

type LoopItem struct {
	Name  any
	Price any
}

// Loop renders the "Loop" template as an HTML fragment
func Loop(data LoopData) template.HTML {
	return mustHTML(RenderLoop, data)
}

// RenderLoop renders the "Loop" template to a writer
func RenderLoop(w io.Writer, data LoopData) error {
	return tmpl().ExecuteTemplate(w, "Loop", data)
}

// RenderLoopHTTP renders "Loop" to an http.ResponseWriter
func RenderLoopHTTP(w http.ResponseWriter, data LoopData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "Loop", data)
}

// BEGIN: Meta - - - - - - - -

// Meta renders the "Meta" template as an HTML fragment
func Meta() template.HTML {
	return mustHTMLNoArgs(RenderMeta)
}

// RenderMeta renders the "Meta" template to a writer
func RenderMeta(w io.Writer) error {
	return tmpl().ExecuteTemplate(w, "Meta", nil)
}

// RenderMetaHTTP renders "Meta" to an http.ResponseWriter
func RenderMetaHTTP(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "Meta", nil)
}

// BEGIN: NavLink - - - - - - - -

type NavLinkData struct {
	Href any
	Text any
}

// NavLink renders the "NavLink" template as an HTML fragment
func NavLink(data NavLinkData) template.HTML {
	return mustHTML(RenderNavLink, data)
}

// RenderNavLink renders the "NavLink" template to a writer
func RenderNavLink(w io.Writer, data NavLinkData) error {
	return tmpl().ExecuteTemplate(w, "NavLink", data)
}

// RenderNavLinkHTTP renders "NavLink" to an http.ResponseWriter
func RenderNavLinkHTTP(w http.ResponseWriter, data NavLinkData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "NavLink", data)
}

// BEGIN: Navbar - - - - - - - -

type NavbarData struct {
	Title any
	Links []NavbarLink
}

type NavbarLink struct {
	Name any
	Link *NavLinkData
}

// Navbar renders the "Navbar" template as an HTML fragment
func Navbar(data NavbarData) template.HTML {
	return mustHTML(RenderNavbar, data)
}

// RenderNavbar renders the "Navbar" template to a writer
func RenderNavbar(w io.Writer, data NavbarData) error {
	return tmpl().ExecuteTemplate(w, "Navbar", data)
}

// RenderNavbarHTTP renders "Navbar" to an http.ResponseWriter
func RenderNavbarHTTP(w http.ResponseWriter, data NavbarData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "Navbar", data)
}

// BEGIN: PersonCard - - - - - - - -

type PersonCardData struct {
	Name     any
	Age      any
	Email    any
	Interest any
}

// PersonCard renders the "PersonCard" template as an HTML fragment
func PersonCard(data PersonCardData) template.HTML {
	return mustHTML(RenderPersonCard, data)
}

// RenderPersonCard renders the "PersonCard" template to a writer
func RenderPersonCard(w io.Writer, data PersonCardData) error {
	return tmpl().ExecuteTemplate(w, "PersonCard", data)
}

// RenderPersonCardHTTP renders "PersonCard" to an http.ResponseWriter
func RenderPersonCardHTTP(w http.ResponseWriter, data PersonCardData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "PersonCard", data)
}

// BEGIN: Nested - - - - - - - -

type NestedData struct {
	Organisation *NestedOrganisation
	Employee     *NestedEmployee
}

type NestedEmployee struct {
	Personal *NestedEmployeePersonal
}

type NestedEmployeePersonal struct {
	Address *NestedEmployeePersonalAddress
}

type NestedEmployeePersonalAddress struct {
	Street  any
	City    any
	Country any
}

type NestedOrganisation struct {
	Name    any
	Founded any
}

// Nested renders the "Nested" template as an HTML fragment
func Nested(data NestedData) template.HTML {
	return mustHTML(RenderNested, data)
}

// RenderNested renders the "Nested" template to a writer
func RenderNested(w io.Writer, data NestedData) error {
	return tmpl().ExecuteTemplate(w, "nested.gohtml", data)
}

// RenderNestedHTTP renders "nested.gohtml" to an http.ResponseWriter
func RenderNestedHTTP(w http.ResponseWriter, data NestedData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "nested.gohtml", data)
}

// BEGIN: RangeMap - - - - - - - -

type RangeMapData struct {
	Data []RangeMapDataKey
}

type RangeMapDataKey struct {
	Key   any
	Value any
}

// RangeMap renders the "RangeMap" template as an HTML fragment
func RangeMap(data RangeMapData) template.HTML {
	return mustHTML(RenderRangeMap, data)
}

// RenderRangeMap renders the "RangeMap" template to a writer
func RenderRangeMap(w io.Writer, data RangeMapData) error {
	return tmpl().ExecuteTemplate(w, "rangeMap", data)
}

// RenderRangeMapHTTP renders "rangeMap" to an http.ResponseWriter
func RenderRangeMapHTTP(w http.ResponseWriter, data RangeMapData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "rangeMap", data)
}

// BEGIN: Widgets - - - - - - - -

type WidgetsData struct {
	Widgets  []WidgetsWidget
	Currency any
}

type WidgetsWidget struct {
	Price any
	Name  any
}

// Widgets renders the "Widgets" template as an HTML fragment
func Widgets(data WidgetsData) template.HTML {
	return mustHTML(RenderWidgets, data)
}

// RenderWidgets renders the "Widgets" template to a writer
func RenderWidgets(w io.Writer, data WidgetsData) error {
	return tmpl().ExecuteTemplate(w, "widgets", data)
}

// RenderWidgetsHTTP renders "widgets" to an http.ResponseWriter
func RenderWidgetsHTTP(w http.ResponseWriter, data WidgetsData) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "widgets", data)
}
