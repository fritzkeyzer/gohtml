// Code generated by gohtml. DO NOT EDIT

//go:build !ignore_autogenerated

package views

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

// --- START TEMPLATE: Person

var rawPersonTemplate =
// language=gotemplate
`<h1>Person</h1>
<p>Name: {{.Name}}</p>
<p>Age: {{.Age}}</p>
<p>Phone: {{.Contact.Phone}}</p>
<p>Email: {{.Contact.Email}}</p>
<div>{{range $link := .Socials}}
        <a href="{{$link.Href}}">{{$link.Name}}</a>{{end}}
</div>`

var PersonTemplate = template.Must(template.New("Person").Parse(rawPersonTemplate))

type PersonData struct {
	Name    any
	Age     any
	Contact PersonContact
	Socials []PersonSocialsLink
}

type PersonContact struct {
	Phone any
	Email any
}

type PersonSocialsLink struct {
	Href any
	Name any
}

// Person renders the "Person" template as an HTML fragment
func Person(data PersonData) template.HTML {
	buf := new(bytes.Buffer)
	err := RenderPerson(buf, data)
	if err != nil {
		panic(err)
	}

	return template.HTML(buf.String())
}

// RenderPerson renders the "Person" template to the specified writer.
// If the writer is of the type http.ResponseWriter - the content-type header is set to "text/html; charset=utf-8"
func RenderPerson(w io.Writer, data PersonData) error {
	if hw, ok := w.(http.ResponseWriter); ok {
		hw.Header().Set("Content-Type", "text/html; charset=utf-8")
	}

	tmpl := PersonTemplate
	if LiveReload {
		var err error
		tmpl, err = template.ParseFiles("example/template/conditional.gohtml")
		if err != nil {
			return err
		}
	}

	return tmpl.Execute(w, data)
}

// --- END TEMPLATE: Person
