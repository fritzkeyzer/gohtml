// Code generated by gohtml. DO NOT EDIT

//go:build !ignore_autogenerated

package {{$.PackageName}}

import (
	"bytes"
	"html/template"
	"io"
	"net/http"
)

{{range .Templates}}
// <<< START TEMPLATE: {{.Name}} 

var raw{{.Name}}Template = 
//language=gotemplate	
`{{.TemplateString}}`

var {{.Name}}Template = template.Must(template.New("{{.Name}}").Parse(raw{{.Name}}Template))

{{range.Structs}}
type {{.Name}} struct{
	{{range .Fields}} {{.Name}} {{.Type}} 
	{{end}}
}
{{end}}

// {{.Name}} renders the {{.EmbedFilePath}} template as an HTML fragment
func {{.Name}}({{ if .Structs}}data {{.Name}}Data{{end}}) template.HTML {
	buf := new(bytes.Buffer)
	err := Render{{.Name}}(buf{{ if .Structs}}, data{{end}})
	if err != nil {
		panic(err)
	}

	return template.HTML(buf.String())
}

// Render{{.Name}} renders the {{.EmbedFilePath}} template to the specified writer.
// For writing to an http.ResponseWriter - use Render{{.Name}}HTTP instead.
func Render{{.Name}}(w io.Writer{{ if .Structs}}, data {{.Name}}Data{{end}}) error {
	tmpl := {{.Name}}Template
	if LiveReload {
		var err error
		tmpl, err = template.ParseFiles("{{.TemplateFilePath}}")
		if err != nil {
			return err
		}
	}

	return tmpl.Execute(w, {{ if .Structs}}data{{else}}nil{{end}})
}

// Render{{.Name}}HTTP renders the {{.EmbedFilePath}} template to the http.ResponseWriter.
// Errors are handled with the package global {{$.PackageName}}.ErrorFn function (which can be customized) and returned.
// You can choose to handle errors with the {{$.PackageName}}.ErrorFn handler, the returned error, or both.
func Render{{.Name}}HTTP(w http.ResponseWriter{{ if .Structs}}, data {{.Name}}Data{{end}}) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	buf := new(bytes.Buffer)
	err := Render{{.Name}}(buf{{ if .Structs}}, data{{end}})
	if err != nil {
		ErrorFn(w, err)
		return err
	}

	return nil
}

// >>> END TEMPLATE: {{.Name}}
{{end}}
