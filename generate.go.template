// Code generated by gohtml. DO NOT EDIT

package {{$.PackageName}}

import (
	"bytes"
	"embed"
	"html/template"
	"io"
	"net/http"
	"os"
)

var LiveReload = os.Getenv("GOHTML_LIVERELOAD") != ""

//go:embed *.gohtml
var tmplFiles embed.FS
var templates = template.Must(template.ParseFS(tmplFiles, "*.gohtml"))

func tmpl() *template.Template {
	if LiveReload {
		return template.Must(template.ParseFS(os.DirFS("{{.TemplateDir}}"), "*.gohtml"))
	}
	return templates
}

func mustHTML[T any](fn func(w io.Writer, data T) error, data T) template.HTML {
	w := new(bytes.Buffer)
	err := fn(w, data)
	if err != nil {
		panic(err)
	}
	return template.HTML(w.String())
}

func mustHTMLNoArgs(fn func(w io.Writer) error) template.HTML {
	w := new(bytes.Buffer)
	err := fn(w)
	if err != nil {
		panic(err)
	}
	return template.HTML(w.String())
}

{{range .Templates}}
// BEGIN: {{.Name}} - - - - - - - -
{{range.Structs}}
type {{.Name}} struct{
	{{range .Fields}} {{.Name}} {{.Type}} 
	{{end}}
}
{{end}}
{{range.Fns}}
{{if .Args}}
// {{.Name}} renders the "{{.Name}}" template as an HTML fragment
func {{.Name}}(data {{.Name}}Data) template.HTML {
	return mustHTML(Render{{.Name}}, data)
}

// Render{{.Name}} renders the "{{.Name}}" template to a writer
func Render{{.Name}}(w io.Writer, data {{.Name}}Data) error {
	return tmpl().ExecuteTemplate(w, "{{.TemplateName}}", data)
}

// Render{{.Name}}HTTP renders {{.TemplateName}} to an http.ResponseWriter
func Render{{.Name}}HTTP(w http.ResponseWriter, data {{.Name}}Data) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "{{.TemplateName}}", data)
}
{{else}}
// {{.Name}} renders the "{{.Name}}" template as an HTML fragment
func {{.Name}}() template.HTML {
	return mustHTMLNoArgs(Render{{.Name}})
}

// Render{{.Name}} renders the "{{.Name}}" template to a writer
func Render{{.Name}}(w io.Writer) error {
	return tmpl().ExecuteTemplate(w, "{{.TemplateName}}", nil)
}

// Render{{.Name}}HTTP renders {{.TemplateName}} to an http.ResponseWriter
func Render{{.Name}}HTTP(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	return tmpl().ExecuteTemplate(w, "{{.TemplateName}}", nil)
}
{{end}}{{end}}{{end}}
